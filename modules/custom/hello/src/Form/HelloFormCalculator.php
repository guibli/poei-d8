<?php
namespace Drupal\hello\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\CssCommand;
use Drupal\Core\Ajax\HtmlCommand;

class HelloFormCalculator extends FormBase{
  function getFormId()
  {
    return 'calculator';
  }
  public function buildForm(array $form, FormStateInterface $form_state)
  {

    $options = array(0=>t('Add'),1=>t('Substract'),2=>t('Multiply'),3=>t('Divide'));
    $options_render = array(0=>t('Drupal set message'),1=>t('Another page'),2=>t('Form s markup'));
    
    $form['first_value'] = array(
      '#type'           => 'textfield',
      '#title'          => t('First value'),
      '#description'    => t('Enter the first value'),
      '#size'           => 40,
      '#ajax'           => array(
        'callback'  => array($this,"validateValueAjax"),
        'event'     => 'change'
      ),
      '#suffix'         => '<span class="first_value"></span>',
      '#attributes' => array('class' => array('ajax-class'))
    );
    $form['list_operation'] = array(
      '#type' => 'radios',
      '#title' => t('Operation'),
      '#default_value' => 0,
      '#options' => $options,
      '#description' => t('Choose an operation'),
    );
    $form['second_value'] = array(
      '#type'           =>'textfield',
      '#title'          =>t('Second value'),
      '#description'    =>t('Enter the second value'),
      '#size'           =>40,
      '#ajax'           => array(
        'callback'  => array($this,"validateValueAjax"),
        'event'     => 'change'
      ),
      '#suffix'         => '<span class="second_value"></span>',
      '#attributes' => array('class' => array('ajax-class'))
    );
    $form['thirs_value_chk'] = array(
      '#type' => 'checkbox',
    );
    $form['third_value'] = array(
      '#type'           =>'textfield',
      '#title'          =>t('Third value'),
      '#description'    =>t('Enter the third value'),
      '#size'           =>40,
      '#ajax'           => array(
        'callback'  => array($this,"validateValueAjax"),
        'event'     => 'change'
      ),
      '#states' => array(
        'invisible' => array(
          ':input[name="thirs_value_chk"]' => array('checked' => FALSE),
        ),
      ),
      '#suffix'         => '<span class="third_value"></span>',
      '#attributes' => array('class' => array('ajax-class'))
    );
    $form['list_result_render'] = array(
      '#type' => 'radios',
      '#title' => t('Render'),
      '#default_value' => 0,
      '#options' => $options_render,
      '#description' => t('Choose an operation'),
    );

    $form['bouton_submit'] = array(
      '#type' => 'submit',
      '#value'=> t('Calculate'),
      '#states' => array(
        'invisible' => array(
          ':input[name="second_value"]' => array('value' => 0),
          ':input[name="list_operation"]' => array('value' => 3),
        ))
    );

    $markup = $form_state->getTemporaryValue('markup');
    $form['markup_result'] = array(
      '#type' => 'item',
      '#title' =>t('Result Here!'),
      '#markup' =>  $markup,
    );
    return $form;
  }
  public function submitForm(array &$form, FormStateInterface $form_state)
  {
    $selected_operation = $form_state->getValue('list_operation');
    $options_render = $form_state->getValue('list_result_render');
    $value1 = $form_state->getValue('first_value');
    $value2 = $form_state->getValue('second_value');
    switch ($selected_operation){
      case 0:
        $result = $value1 + $value2;
        break;
      case 1:
        $result = $value1 - $value2;
        break;
      case 2:
        $result = $value1 * $value2;
        break;
      case 3:
        $result = $value1 / $value2;
        break;
    }

    switch ($options_render){
      case 0:
        drupal_set_message(t('Result : @result',array('@result'=>$result)));
        break;
      case 1:
        $form_state->setRedirect('hello.hello', array('testparam' => $result));
        /*$url = \Drupal\Core\Url::fromRoute('hello.hello', ['testparam' => $result]);
        $form_state->setRedirectUrl($url);*/
        break;
      case 2:
        $form_state->setTemporary(array('markup' => $result));
        $form_state->setRebuild();
        break;
    }


  }

  /**
   * @param array $form
   * @param FormStateInterface $form_state
   */
  public function validateForm(array &$form, FormStateInterface $form_state)
  {
    parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
    //check value
    $value1 = $form_state->getValue('first_value');
    $value2 = $form_state->getValue('second_value');

    (!is_numeric($value1)?$form_state->setErrorByName('first_value','Must be numeric'):'');
    (!is_numeric($value2)?$form_state->setErrorByName('second_value','Must be numeric'):'');

  }

  /**
   * @param array $form
   * @param FormStateInterface $form_state
   * @return AjaxResponse
   */
  public function validateValueAjax(array &$form, FormStateInterface $form_state){

    $response = new AjaxResponse();

    $css = array('border' => '1px solid #ccc');
    $field = '';

    $message = t('Ajaxcallback !!!!');

    $value1 = $form_state->getValue('first_value');
    $value2 = $form_state->getValue('second_value');

    if(!is_numeric($value1)){
      $css =  array('border' => '2px solid yellow');
      $field="first-value";
    }elseif(!is_numeric($value2)){
      $css =  array('border' => '2px solid blue');
      $field="second-value";
    }
    if ($field) {
      $response->addCommand(new CssCommand("#edit-$field", $css));
      $response->addCommand(new HtmlCommand(".$field", $message));
    }
    else
    {
      $response->addCommand(new CssCommand(".ajax-class", $css));
      $response->addCommand(new HtmlCommand(".ajax-class", $message));
    }
    return $response;
  }
}